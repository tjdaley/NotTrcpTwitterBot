"""
webserver.py - Serves reports generated by analyzemytweets.
"""
__author__ = "Thomas J. Daley, J.D."
__version__ = "0.0.1"

import http.server
from pathlib import Path
import random
import socketserver
import sys

PORT =  8003
PUB_DIR = "./public/"
FORMAT_NUM = "1"
ERROR_FORMAT = "./public/error_message_format_{}.html"

class HttpHandler(http.server.SimpleHTTPRequestHandler):
    """
    Extends SimpleHTTPRequestHandler to read missing files from a pipe.
    """

    def do_GET(self):
        """
        Handle HTTP GET requests.
        """
        if self.path == "/shutdown":
            sys.exit(2)

        if self.path[:2] == "/?":
            self.do_search()
            return

        target_path = self.target_path()
        if not self.file_exists(target_path):
            self.send_bad_path_headers()
            return

        self.send_success_headers(target_path)
        self.send_file(target_path)

    def send_bad_path_headers(self):
        explanation = random.choice([
            "I cannot find {}.",
            "{} is not a path anywhere on my server.",
            "The file you asked for ({}) does not exist on this server."
        ])
        message = random.choice([
            "You typed in some crazy bullshit.",
            "Are you kidding me? Check your spelling and sanity and try again.",
            "I'm sorry. I cannot do that.",
            "Seriously. What was that? Please check yourself.",
            "Your hacking skills are rotten. Check your input and try again."
        ])
        self.send_error(404, explanation.format(self.path[1:]), message)

    def send_success_headers(self, target_path):
        dot = target_path.rfind(".")
        if dot == -1:
            mime_type = "text/html"
        else:
            extension = target_path[dot:]
            mime_type = self.extensions_map[extension]
        self.send_response(200)
        self.send_header("Content-type", mime_type)
        self.end_headers()

    def send_file(self, path):
        with open(path, "rb") as infile:
            content = infile.read()
        self.wfile.write(content)

    def target_path(self)->str:
        """
        Figure out the path of the file being requested.
        """
        if self.path == "/":
            target_file = "index.html"
        else:
            target_file = self.path[1:]

        return PUB_DIR + target_file

    def file_exists(self, path):
        try:
            my_file = Path(path)
            return my_file.is_file()
        except Exception as e:
            self.log_error("Error checking '%s': %s.", path, e)
        
        return False

    def do_search(self):
        pass

def main():
    handler = HttpHandler
    with open (ERROR_FORMAT.format(FORMAT_NUM), "r") as errfile:
        handler.error_message_format = errfile.read()

    with socketserver.TCPServer(("", PORT), handler) as httpd:
        print("Serving at port ", PORT)
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            pass
    print("{}:{} Stopped.".format("localhost", PORT))

if __name__ == "__main__":
    main()